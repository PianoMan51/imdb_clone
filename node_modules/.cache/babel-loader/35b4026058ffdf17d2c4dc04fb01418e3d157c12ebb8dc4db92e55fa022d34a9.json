{"ast":null,"code":"var _jsxFileName = \"/Users/nikolajwold/Desktop/Projects/imdb/src/components/Content.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport Search from \"./Search\";\nimport MovieContainer from \"./MovieContainer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Content() {\n  _s();\n  const [movieData, setMovieData] = React.useState([]);\n  const [loading, setLoading] = React.useState(false);\n  const fetchData = title => {\n    setLoading(true);\n    const apiKey = \"b64be8fa\";\n    fetch(`http://www.omdbapi.com/?apikey=${apiKey}&s=${title}`).then(response => response.json()).then(data => {\n      if (data.Search) {\n        const imdbIDs = data.Search.map(movie => movie.imdbID);\n        const fetchPromises = imdbIDs.map(imdbID => fetch(`http://www.omdbapi.com/?apikey=${apiKey}&i=${imdbID}&plot=full`).then(response => response.json()));\n        Promise.all(fetchPromises).then(detailedDataArray => {\n          const combinedData = data.Search.map((movie, index) => ({\n            ...movie,\n            ...detailedDataArray[index]\n          }));\n          setMovieData(combinedData);\n        }).catch(error => {\n          console.error(\"Error fetching detailed data:\", error);\n        }).finally(() => {\n          setLoading(false);\n        });\n      } else {\n        setMovieData([]);\n        setLoading(false);\n      }\n    }).catch(error => {\n      console.error(\"Error fetching search results:\", error);\n      setLoading(false);\n    });\n  };\n  React.useEffect(() => {\n    fetchData(\"\");\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"content\",\n    children: [!selectedMovie && /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Movies\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 26\n    }, this), !selectedMovie && /*#__PURE__*/_jsxDEV(Search, {\n      onSearch: fetchData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 26\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-icon\",\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        class: \"fa-solid fa-spinner fa-spin fa-2xl\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(MovieContainer, {\n      movieData: movieData,\n      selectedMovie: selectedMovie\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n_s(Content, \"xAECxhrW3SId2+pmaJlVIT8EevU=\");\n_c = Content;\nvar _c;\n$RefreshReg$(_c, \"Content\");","map":{"version":3,"names":["React","Search","MovieContainer","jsxDEV","_jsxDEV","Content","_s","movieData","setMovieData","useState","loading","setLoading","fetchData","title","apiKey","fetch","then","response","json","data","imdbIDs","map","movie","imdbID","fetchPromises","Promise","all","detailedDataArray","combinedData","index","catch","error","console","finally","useEffect","className","children","selectedMovie","fileName","_jsxFileName","lineNumber","columnNumber","onSearch","class","_c","$RefreshReg$"],"sources":["/Users/nikolajwold/Desktop/Projects/imdb/src/components/Content.js"],"sourcesContent":["import React from \"react\";\nimport Search from \"./Search\";\nimport MovieContainer from \"./MovieContainer\";\n\nexport default function Content() {\n  const [movieData, setMovieData] = React.useState([]);\n  const [loading, setLoading] = React.useState(false);\n\n  const fetchData = (title) => {\n    setLoading(true);\n    const apiKey = \"b64be8fa\";\n    fetch(`http://www.omdbapi.com/?apikey=${apiKey}&s=${title}`)\n      .then((response) => response.json())\n      .then((data) => {\n        if (data.Search) {\n          const imdbIDs = data.Search.map((movie) => movie.imdbID);\n          const fetchPromises = imdbIDs.map((imdbID) =>\n            fetch(\n              `http://www.omdbapi.com/?apikey=${apiKey}&i=${imdbID}&plot=full`\n            ).then((response) => response.json())\n          );\n\n          Promise.all(fetchPromises)\n            .then((detailedDataArray) => {\n              const combinedData = data.Search.map((movie, index) => ({\n                ...movie,\n                ...detailedDataArray[index],\n              }));\n              setMovieData(combinedData);\n            })\n            .catch((error) => {\n              console.error(\"Error fetching detailed data:\", error);\n            })\n            .finally(() => {\n              setLoading(false);\n            });\n        } else {\n          setMovieData([]);\n          setLoading(false);\n        }\n      })\n      .catch((error) => {\n        console.error(\"Error fetching search results:\", error);\n        setLoading(false);\n      });\n  };\n\n  React.useEffect(() => {\n    fetchData(\"\");\n  }, []);\n\n  return (\n    <div className=\"content\">\n      {!selectedMovie && <h1>Movies</h1>}\n      {!selectedMovie && <Search onSearch={fetchData} />}\n      {loading ? (\n        <div className=\"loading-icon\">\n          <i class=\"fa-solid fa-spinner fa-spin fa-2xl\"></i>\n        </div>\n      ) : (\n        <MovieContainer movieData={movieData} selectedMovie={selectedMovie} />\n      )}\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}